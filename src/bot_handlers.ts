import {Markup} from 'telegraf';
import {CLARIFYING_QUESTIONS, DREAM_INTERPRETERS, USER_STATES} from './constants';
import SessionManager from "./session_manager";
import GeminiAPI from "./gemini_api";
import {Context} from "./types/context.interface";
import {Session} from "./types/session.interface";
import {Interpreter, PromptData} from "./types/prompt-data.interface";

export default class BotHandlers {
  private sessionManager: SessionManager;
  private geminiAPI: GeminiAPI;

  constructor(sessionManager: SessionManager, geminiAPI: GeminiAPI) {
    this.sessionManager = sessionManager;
    this.geminiAPI = geminiAPI;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id;
      
      if (!userId) {
        throw new Error('User ID is undefined');
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.sessionManager.resetSession(userId);
      
      const welcomeMessage = `üåô **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–Ω–æ–≤!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–∏—Ö —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤.

–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–Ω–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–Ω–Ω–∏–∫–∞
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìñ –°–æ–Ω–Ω–∏–∫ –ú–∏–ª–ª–µ—Ä–∞', 'interpreter_miller')],
        [Markup.button.callback('üß† –°–æ–Ω–Ω–∏–∫ –§—Ä–µ–π–¥–∞', 'interpreter_freud')],
        [Markup.button.callback('üîÆ –°–æ–Ω–Ω–∏–∫ –¶–≤–µ—Ç–∫–æ–≤–∞', 'interpreter_tsvetkov')],
        [Markup.button.callback('üí≠ –°–æ–Ω–Ω–∏–∫ –õ–æ—Ñ—Ñ–∞', 'interpreter_loff')]
      ]);

      await ctx.reply(welcomeMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });

    } catch (error) {
      console.error('Error in handleStart:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–Ω–Ω–∏–∫–∞
  async handleInterpreterChoice(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id;
      
      if (!userId) {
        throw new Error('User ID is undefined');
      }


      const interpreterKey = ctx.match?.[1]; // –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ callback_data
      
      if (!interpreterKey || !DREAM_INTERPRETERS[interpreterKey]) {
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ–Ω–Ω–∏–∫');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
      await this.sessionManager.updateSessionState(userId, {
        state: USER_STATES.WAITING_DREAM,
        interpreter: interpreterKey as Interpreter,
      });

      const interpreter = DREAM_INTERPRETERS[interpreterKey];
      
      await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω ${interpreter.name}`);
      await ctx.editMessageText(interpreter.description, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('Error in handleInterpreterChoice:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–Ω–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleTextMessage(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id;
      
      if (!userId) {
        throw new Error('User ID is undefined');
      }

      const messageText = (ctx.message as any)?.text;
      
      if (!messageText) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
        return;
      }

      const session = await this.sessionManager.getSession(userId);

      switch (session.state) {
        case USER_STATES.WAITING_DREAM:
          await this.handleDreamDescription(ctx, userId, messageText, session);
          break;
          
        case USER_STATES.ASKING_QUESTIONS:
          await this.handleQuestionAnswer(ctx, userId, messageText, session);
          break;
          
        case USER_STATES.WAITING_INTERPRETER:
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–Ω–Ω–∏–∫, –Ω–∞–∂–∞–≤ /start');
          break;
          
        case USER_STATES.PROCESSING:
          await ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
          break;
          
        default:
          await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start');
      }

    } catch (error) {
      console.error('Error in handleTextMessage:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–∞
  async handleDreamDescription(ctx: Context, userId: number, dreamText: string, session: Session): Promise<void> {
    if (dreamText.length < 10) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–Ω –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).');
      return;
    }

    if (dreamText.length > 2000) {
      await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º
    await this.sessionManager.updateSessionState(userId, {
      state: USER_STATES.ASKING_QUESTIONS,
      dreamText: dreamText,
      currentQuestion: 0,
      answers: []
    });

    await ctx.reply('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞ –ø–æ–ª—É—á–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:');
    
    // –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await this.askNextQuestion(ctx, userId, 0);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
  async handleQuestionAnswer(ctx: Context, userId: number, answerText: string, session: Session): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (–¥–æ 5 —Å–ª–æ–≤)
    const words = answerText.trim().split(/\s+/);
    if (words.length > 5) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–¥–æ 5 —Å–ª–æ–≤).');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    const updatedSession = await this.sessionManager.addAnswer(userId, answerText);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    if (updatedSession.currentQuestion < CLARIFYING_QUESTIONS.length) {
      await this.askNextQuestion(ctx, userId, updatedSession.currentQuestion);
    } else {
      // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
      await this.startDreamAnalysis(ctx, userId, updatedSession);
    }
  }

  // –ó–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
  async askNextQuestion(ctx: Context, userId: number, questionIndex: number): Promise<void> {
    if (questionIndex < CLARIFYING_QUESTIONS.length) {
      const question = CLARIFYING_QUESTIONS[questionIndex];
      await ctx.reply(`‚ùì **–í–æ–ø—Ä–æ—Å ${questionIndex + 1}/${CLARIFYING_QUESTIONS.length}:**\n\n${question}`, {
        parse_mode: 'Markdown'
      });
    }
  }

  // –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞
  async startDreamAnalysis(ctx: Context, userId: number, session: Session): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
      await this.sessionManager.updateSessionState(userId, {
        state: USER_STATES.PROCESSING
      });

      await ctx.reply('üîÆ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω...**\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.', {
        parse_mode: 'Markdown'
      });

      if (!session.interpreter || !session.dreamText || !session.answers) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const promptData: PromptData = {
        interpreter: session.interpreter,
        dreamText: session.dreamText,
        answers: session.answers
      };

      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const analysisResult = await this.geminiAPI.callGeminiAPI(promptData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(`‚ú® **–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:**\n\n${analysisResult}`, {
        parse_mode: 'Markdown'
      });

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–æ–Ω', 'restart_analysis')]
      ]);

      await ctx.reply('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–æ–Ω?', keyboard);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await this.sessionManager.updateSessionState(userId, {
        state: USER_STATES.COMPLETED
      });

    } catch (error) {
      console.error('Error in startDreamAnalysis:', error);
      
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      await ctx.reply(`üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: ${errorMessage}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.`);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await this.sessionManager.updateSessionState(userId, {
        state: USER_STATES.WAITING_INTERPRETER
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
  async handleRestartAnalysis(ctx: Context): Promise<void> {
    try {
      await ctx.answerCbQuery('–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑');
      await this.handleStart(ctx);
    } catch (error) {
      console.error('Error in handleRestartAnalysis:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
  async handleHelp(ctx: Context): Promise<void> {
    const helpMessage = `üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ 4 —Å–æ–Ω–Ω–∏–∫–æ–≤
3. –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
4. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–æ 5 —Å–ª–æ–≤ –∫–∞–∂–¥—ã–π)
5. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–Ω–∞

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–°–æ–Ω–Ω–∏–∫–∏:**
üìñ –ú–∏–ª–ª–µ—Ä - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
üß† –§—Ä–µ–π–¥ - –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥  
üîÆ –¶–≤–µ—Ç–∫–æ–≤ - –Ω–∞—Ä–æ–¥–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏
üí≠ –õ–æ—Ñ—Ñ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start`;

    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  async handleUnknownCommand(ctx: Context): Promise<void> {
    await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
  }
}
