import DreamAnalyzerBot from "../bot";
import {Markup, Scenes} from "telegraf";
import {USER_STATES} from "../constants";
import {PromptData} from "../types/prompt-data.interface";
import {Logger} from "../services/logger";
import {TextFormatter} from "../services/text-formatter";
import {MyContext} from "../types/context.interface";

export const analyzeDreamSceneFactory = (bot: DreamAnalyzerBot) => {
    return new Scenes.WizardScene<Scenes.WizardContext>(
        'analyzeDreamScene',
        async (ctx: MyContext) => {
            console.log('[analyzeDreamScene] step started');
            await bot.sceneManager.deleteAll(ctx);
            try {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
                await bot.user.updateDialogSession({
                    state: USER_STATES.PROCESSING
                });
                const session = await bot.user.getDialogSession();
                await bot.sceneManager.promoteTGChannel(ctx);
                await new Promise(resolve => setTimeout(resolve, 15000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                await bot.sceneManager.deleteAll(ctx);
                await bot.sceneManager.replyAndStore(ctx,'üîÆ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–æ–Ω...**\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.', {
                    parse_mode: 'Markdown'
                });

                if (!session.interpreter || !session.dreamText || !session.answers) {
                    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
                }

                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
                const promptData: PromptData = {
                    interpreter: session.interpreter,
                    dreamText: session.dreamText,
                    answers: session.answers
                };
                // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                const analysisResult =await bot.getGeminiAPI().callGeminiAPI(promptData)
                    .then(text => {
                        Logger.log(`[gemini] original ${text}`);
                        return text;
                    })
                    .then(text => TextFormatter.escapeMarkdown(text));

                await bot.sceneManager.deleteAll(ctx);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await ctx.replyWithMarkdownV2(`‚ú® **–ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:**\n\n${analysisResult}`);
                Logger.log(`User ${bot.user.id} received analysis: ${analysisResult}`);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await bot.user.updateDialogSession({
                    state: USER_STATES.COMPLETED,
                    countAIRequests: session.countAIRequests + 1
                });
                await bot.sceneManager.deleteAll(ctx);
                if(!(await bot.user.hasAIPermission())) {
                    await bot.sceneManager.replyAndStore(ctx, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.', Markup.inlineKeyboard([bot.sceneManager.startButton]));
                } else {
                    await bot.sceneManager.initialState(ctx);
                }
                await bot.user.updateDialogSession({
                    interpreter: undefined,
                });
                ctx.session.isGreeted = false;
                await ctx.scene.leave();
            } catch (error) {
                console.error('Error in startDreamAnalysis:', error);

                const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                await bot.sceneManager.replyAndStore(ctx,`üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞: ${errorMessage}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.`);

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await bot.user.updateDialogSession({
                    state: USER_STATES.WAITING_INTERPRETER,
                    interpreter: undefined,
                });
                ctx.session.isGreeted = false;
                await ctx.scene.leave();
            }
        }
    );
};
