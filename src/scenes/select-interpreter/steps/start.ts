import {Markup} from "telegraf";
import {MyContext} from "../../../types/context.interface";
import {greeting} from "../../../messages/greeting";
import DreamAnalyzerBot from "../../../bot";
import {Logger} from "../../../services/logger";

export const startAnalyzeDream = async (ctx: MyContext, bot: DreamAnalyzerBot) => {
    console.log('[StartAnalyzeDream] step started');
    try {
        if(ctx.session && !ctx.session.isGreeted) {
            await greeting(ctx);
            ctx.session.isGreeted = true;
        }
        await bot.user.updateDialogSession({
            interpreter: undefined,
        });
        bot.sceneManager.handleInput(ctx as MyContext);
        await bot.sceneManager.deleteAll(ctx  as MyContext);
        ctx.deleteMessage && await ctx.deleteMessage();
        const userId = ctx.from?.id;

        if (!userId) {
            throw new Error('User ID is undefined');
        }

        if(!(await bot.user.hasAIPermission())) {
            const message = ctx.i18n.t("tryAgain");
            return await bot.sceneManager.replyAndStore(ctx as MyContext, message, Markup.inlineKeyboard([bot.sceneManager.startButton(ctx)]));

            // return await bot.sceneManager.replyAndStore(ctx as MyContext, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.', Markup.inlineKeyboard([bot.sceneManager.startButton]));
        }

        const welcomeMessage = `üåô **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–Ω–æ–≤!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–∏—Ö —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤.

–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–Ω–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:`;
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–Ω–Ω–∏–∫–∞
        const keyboard = Markup.inlineKeyboard([
            ...bot.sceneManager.interpreterButtons
        ]);

        await ctx.reply(welcomeMessage, {
            parse_mode: 'Markdown',
            ...keyboard
        });
        return ctx.wizard.next();

    } catch (error) {
        console.error('Error in handleStart:', error);
        Logger.log('Error in handleStart:', error);
        await bot.sceneManager.initialState(ctx);
    }
}
